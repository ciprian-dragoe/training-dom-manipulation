version: '3.8'
services:
  admin-db1:
    image: admin_db
    build:
      context: ./
      dockerfile: ./docker-services/admin-db/Dockerfile
    ports:
      - 1000:${ADMIN_PORT}
    volumes:
      - admin:/var/lib/postgresql/data
      - ./docker-services/admin-db/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      POSTGRES_USER: ${ADMIN_USER}
      POSTGRES_PASSWORD: ${ADMIN_PASS}
      POSTGRES_DB: ${ADMIN_DBNAME}
  language-py:
    image: language_py
    build:
      context: ./
      dockerfile: ./docker-services/language-py/Dockerfile
    command: ["echo", "### TURNED OFF WAITING FOR ADMIN TO START IT ###"]
  language-pg:
    image: language_pg
    build:
      context: ./
      dockerfile: ./docker-services/language-pg/Dockerfile
    ports:
      - 1001:${PRACTICE_PORT}
    environment:
      POSTGRES_USER: ${PRACTICE_USER}
      POSTGRES_DB: ${PRACTICE_DBNAME}
      POSTGRES_PASSWORD: ${PRACTICE_PASS}
    command: ["echo", "### TURNED OFF WAITING FOR ADMIN TO START IT ###"]
  admin-db:
    image: mcr.microsoft.com/mssql/server:2019-latest
    ports:
      - 1002:${ADMIN_PORT}
    environment:
      SA_PASSWORD: ${ADMIN_PASS}
      ACCEPT_EULA: "Y"
  python-server:
    image: python_server
    build:
      context: ./
      dockerfile: ./app/Dockerfile
    ports:
      - "5000:80"
    volumes:
      - ./app:/app
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      NETWORK_NAME: ${COMPOSE_PROJECT_NAME}_default
      ADMIN_SERVER_TYPE: ${ADMIN_SERVER_TYPE}
      ADMIN_HOST: ${ADMIN_HOST}
      ADMIN_PORT: ${ADMIN_PORT}
      ADMIN_USER: ${ADMIN_USER}
      ADMIN_PASS: ${ADMIN_PASS}
      ADMIN_DBNAME: ${ADMIN_DBNAME}
      PRACTICE_SERVER_TYPE: ${PRACTICE_HOST}
      PRACTICE_HOST: ${PRACTICE_HOST}
      PRACTICE_PORT: ${PRACTICE_PORT}
      PRACTICE_USER: ${PRACTICE_USER}
      PRACTICE_PASS: ${PRACTICE_PASS}
      PRACTICE_DBNAME: ${PRACTICE_DBNAME}
      ADMIN_DASHBOARD_PASS: ${ADMIN_DASHBOARD_PASS}
      DOCKER_KILL_TIMEOUT_SECONDS: ${DOCKER_KILL_TIMEOUT_SECONDS}
      APP_SECRET_KEY: ${APP_SECRET_KEY}
      FLASK_ENV: ${RUNNING_MODE}
    depends_on:
      - admin-db
    command: [ "bash", "-c", "chmod +x /app/start_server.sh && sh /app/start_server.sh"]

volumes:
  admin:
